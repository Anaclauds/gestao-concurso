@page "/lancamentoNotas"
@using AppConcurso.Models
@using AppConcurso.Controllers
@inject CandidatoController candidatoController
@inject ConcursoDisciplinaController concursoDisciplinaController
@inject PontuacaoController pontuacaoController
@inject NavigationManager navigationManager

<h3>Lançamento de Notas</h3>

<div class="container">
    <div class="mb-3">
        <label for="concurso" class="form-label">Concurso:</label>
        <select @bind="ConcursoSelecionado" @bind:event="onchange" class="form-select">
            <option value="0">Selecione um concurso</option>
            @foreach (var concurso in concursosDisponiveis)
            {
                <option value="@concurso.Id">@concurso.Edital</option>
            }
        </select>
    </div>

    @if (candidatosDisponiveis.Count > 0)
    {
        <div class="mb-3">
            <label for="candidato" class="form-label">Candidato:</label>
            <select @bind="CandidatoSelecionado" @bind:event="onchange" class="form-select">
                <option value="0">Selecione um candidato</option>
                @foreach (var candidato in candidatosDisponiveis)
                {
                    <option value="@candidato.Id">@candidato.Nome</option>
                }
            </select>
        </div>
    }

    @if (disciplinasDisponiveis.Count > 0)
    {
        <h4>Disciplinas</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Disciplina</th>
                    <th>Nota</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var disciplina in disciplinasDisponiveis)
                {
                    <tr>
                        <td>@disciplina.Disciplina</td>
                        <td>
                            <input type="number" step="0.1" min="0" max="10" class="form-control"
                                   @bind="notas[disciplina.Id]" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (enabledButton)
        {
            <button type="button" class="btn btn-warning" @onclick="Cancelar">CANCELAR</button>
            <button type="button" class="btn btn-success" @onclick="SalvarNotas">SALVAR</button>
        }
        else
        {
            <div class="alert alert-success" role="alert">
                Notas lançadas com sucesso!
            </div>
            <button type="button" class="btn btn-primary" @onclick="NovoLancamentoNotas">NOVO LANÇAMENTO</button>
        }
    }
</div>

@code {
    private List<Concurso> concursosDisponiveis = new();
    private List<Candidato> candidatosDisponiveis = new();
    private List<ConcursoDisciplina> disciplinasDisponiveis = new();
    private Dictionary<int, decimal> notas = new();
    private bool enabledButton = true;

    private int concursoSelecionado;
    private int candidatoSelecionado;

    protected override async Task OnInitializedAsync()
    {
        concursosDisponiveis = await candidatoController.ObterTodosConcursos();
    }

    private int ConcursoSelecionado
    {
        get => concursoSelecionado;
        set
        {
            concursoSelecionado = value;
            _ = CarregarCandidatos();
        }
    }

    private int CandidatoSelecionado
    {
        get => candidatoSelecionado;
        set
        {
            candidatoSelecionado = value;
            _ = CarregarDisciplinas();
        }
    }

    private async Task CarregarCandidatos()
    {
        if (concursoSelecionado > 0)
        {
            candidatosDisponiveis = await candidatoController.ListaCandidatos();
            disciplinasDisponiveis.Clear();
            notas.Clear();
        }
    }

    private async Task CarregarDisciplinas()
    {
        if (candidatoSelecionado > 0)
        {
            disciplinasDisponiveis = await concursoDisciplinaController.ObterTodos();
            notas.Clear();
            foreach (var disciplina in disciplinasDisponiveis)
            {
                notas[disciplina.Id] = 0;
            }
        }
    }

    private async Task SalvarNotas()
    {
        foreach (var disciplina in disciplinasDisponiveis)
        {
            var pontuacao = new Pontuacao
                {
                    IdInscricao = candidatoSelecionado,
                    IdConcursoDisciplina = disciplina.Id,
                    Nota = notas[disciplina.Id]
                };

            await pontuacaoController.AdicionarOuAtualizar(pontuacao);
        }

        enabledButton = false;
    }

    private void Cancelar()
    {
        navigationManager.NavigateTo("/lancamentoNotas");
    }

    private void NovoLancamentoNotas()
    {
        navigationManager.NavigateTo("/lancamentoNotas", forceLoad: true);
    }
}
