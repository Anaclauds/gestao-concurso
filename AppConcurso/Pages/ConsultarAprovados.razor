@page "/consultarAprovados"
@using AppConcurso.Models
@using AppConcurso.Controllers
@using AppConcurso.Utilitarios
@inject ConcursoController concursoController
@inject PontuacaoController pontuacaoController
@inject NavigationManager Navigation

<h3 class="text-center mt-4 fw-bold">Consultar Lista de Aprovados</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="mb-3">
                <label for="concurso" class="form-label fw-bold">Selecione um concurso:</label>
                <select id="concurso" class="form-select" @bind="ConcursoSelecionadoId">
                    <option value="0">-- Selecione --</option>
                    @foreach (var concurso in ListaConcursos)
                    {
                        <option value="@concurso.Id">@concurso.Edital</option>
                    }
                </select>
            </div>

            <div class="text-center">
                <button class="btn btn-primary" @onclick="BuscarAprovados" disabled="@(ConcursoSelecionadoId == 0)">
                    <i class="fas fa-search"></i> Buscar Aprovados
                </button>
            </div>
        </div>
    </div>

    @if (ListaAprovados.Any())
    {
        <h4 class="mt-4 text-center fw-bold">Lista de Aprovados</h4>

        <div class="table-responsive">
            <table class="table table-striped table-hover text-center">
                <thead class="table-dark">
                    <tr>
                        <th>Posição</th>
                        <th>Candidato</th>
                        <th>Média das Notas</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (candidato, index) in ListaAprovados.Select((c, i) => (c, i + 1)))
                    {
                        <tr>
                            <td><strong>@index</strong></td>
                            <td>@candidato.Nome</td>
                            <td>@candidato.Media.ToString("F2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-success" @onclick="GerarRelatorioAprovados">
                <i class="fas fa-print"></i> Imprimir Lista de Aprovados
            </button>
        </div>
    }
    else if (Buscou && !ListaAprovados.Any())
    {
        <div class="alert alert-danger text-center mt-4" role="alert">
            <i class="fas fa-exclamation-circle"></i> Nenhum aprovado encontrado para este concurso.
        </div>
    }
</div>

@code {
    private int ConcursoSelecionadoId { get; set; } = 0;
    private List<Concurso> ListaConcursos = new();
    private List<AprovadoDTO> ListaAprovados = new();
    private bool Buscou = false;

    protected override async Task OnInitializedAsync()
    {
        ListaConcursos = await concursoController.ListarConcursos();
    }

    private async Task BuscarAprovados()
    {
        if (ConcursoSelecionadoId > 0)
        {
            ListaAprovados = await pontuacaoController.ObterAprovadosPorConcurso(ConcursoSelecionadoId);
            Buscou = true;
        }
    }

    private async Task GerarRelatorioAprovados()
    {
        try
        {
            var listaAprovados = await pontuacaoController.ObterRelatorioAprovados(ConcursoSelecionadoId);
            var impressora = new Impressora();
            await impressora.GerarRelatorioAprovados(listaAprovados, Navigation);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro: " + ex.Message);
        }
    }
}
